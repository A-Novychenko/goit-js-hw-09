{"mappings":"AAAA,MAAMA,EAAOC,SAASC,cAAc,SAEpC,IAAIC,EAAU,KAEdH,EAAKI,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAEC,iBAEF,MACEC,UAAYC,MAAOC,EAAYC,KAAMC,EAAWC,OAAQC,IACtDR,EAAES,cAEAC,EAAQC,OAAOP,EAAWQ,OAC1BP,EAAOM,OAAOL,EAAUM,OACxBL,EAASI,OAAOH,EAAYI,OAElC,IACIC,EAAaH,EAEjBZ,EAAUgB,aACR,CAACC,EAAUC,KAETH,GAAcR,EAmBX,IAAIY,SAAQ,CAACC,EAASC,KACLC,KAAKC,QAc1B,IA/BIC,MAAK,EAACC,SAAEA,EAAQpB,MAAEA,MACjBqB,QAAQC,IAAI,uBAAqBF,QAAiBpB,MAAU,IAE7DuB,OAAM,EAACH,SAAEA,EAAQpB,MAAEA,MAClBqB,QAAQC,IAAI,sBAAoBF,QAAiBpB,MAAU,GAC3D,GAENU,EAhBa,EAkBbH,GAGFiB,YAAW,IAAMC,cAAc9B,IAAUY,EAAQL,EAAOE,E","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\n\nlet timerId = null;\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  const {\n    elements: { delay: delayInput, step: stepInput, amount: amountInput },\n  } = e.currentTarget;\n\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  let position = 0;\n  let delayCount = delay;\n\n  timerId = setInterval(\n    (position, delay) => {\n      position += 1;\n      delayCount += step;\n\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    },\n    delayCount,\n    position,\n    delay\n  );\n\n  setTimeout(() => clearInterval(timerId), delay + step * amount);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    (position, delay) => {\n      if (shouldResolve) {\n        resolve({\n          position,\n          delay,\n        });\n      } else {\n        reject({\n          position,\n          delay,\n        });\n      }\n    };\n  });\n}\n\n// makePromise\n// const makePromise = () => {\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve('✅ Куку это resolve');\n//       }\n\n//       reject('❌ все пропало это reject');\n//     }, 2000);\n//   });\n// };\n\n// makePromise()\n//   .then(result => console.log(result))\n//   .catch(error => console.log(error));\n"],"names":["$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$timerId","addEventListener","e","preventDefault","elements","delay","delayInput","step","stepInput","amount","amountInput","currentTarget","delay1","Number","value","delayCount","setInterval","position2","delay2","Promise","resolve","reject","Math","random","then","position","console","log","catch","setTimeout","clearInterval"],"version":3,"file":"03-promises.3c07e660.js.map"}