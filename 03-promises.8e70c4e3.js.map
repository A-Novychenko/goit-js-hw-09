{"mappings":"AAAA,MAAMA,EAAOC,SAASC,cAAc,SAEpC,IAAIC,EAAW,EAEfH,EAAKI,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAEC,iBAEF,MACEC,UAAYC,MAAOC,EAAYC,KAAMC,EAAWC,OAAQC,IACtDR,EAAES,cAEN,IAAIC,EAAQC,OAAOP,EAAWQ,OAC9B,MAAMP,EAAOM,OAAOL,EAAUM,OACxBL,EAASI,OAAOH,EAAYI,OAKlCC,YAAW,KACT,MAAMC,EAAUC,aAAY,KA4BhC,IAAuBC,EAAUb,EA3B3BL,GAAY,GA2BKkB,EAzBHlB,EAyBaK,EAzBHO,EA0BrB,IAAIO,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAGpCH,EAAQ,CACNI,SAAAN,E,MACAb,IAGFgB,EAAO,CACLG,SAAAN,E,MACAb,GACA,KArCCoB,MAAK,EAAGD,SAAAE,EAAQrB,MAAEA,MACjBsB,QAAQC,IAAI,uBAAqBF,QAAiBrB,MAAU,IAE7DwB,OAAM,EAAGL,SAAAM,EAAQzB,MAAEA,MAClBsB,QAAQC,IAAI,sBAAoBE,QAAiBzB,MAAU,IAG/DO,GAASL,EAELE,IAAWT,GACb+B,cAAcf,EAAQ,GAEvBT,EAAK,GACPK,E","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\n\nlet position = 0;\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  const {\n    elements: { delay: delayInput, step: stepInput, amount: amountInput },\n  } = e.currentTarget;\n\n  let delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n  // const startDelay = Math.abs(delay - step);\n\n  ///////\n\n  setTimeout(() => {\n    const timerID = setInterval(() => {\n      position += 1;\n\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n\n      delay += step;\n\n      if (amount === position) {\n        clearInterval(timerID);\n      }\n    }, step);\n  }, delay);\n\n  // createPromise(position, delay)\n  //   .then(({ position, delay }) => {\n  //     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  //   })\n  //   .catch(({ position, delay }) => {\n  //     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  //   });\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      resolve({\n        position,\n        delay,\n      });\n    } else {\n      reject({\n        position,\n        delay,\n      });\n    }\n  });\n}\n"],"names":["$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$position","addEventListener","e","preventDefault","elements","delay","delayInput","step","stepInput","amount","amountInput","currentTarget","delay1","Number","value","setTimeout","timerID","setInterval","position3","Promise","resolve","reject","Math","random","position","then","position1","console","log","catch","position2","clearInterval"],"version":3,"file":"03-promises.8e70c4e3.js.map"}